name: Rust

on: workflow_dispatch

# on:
#   push:
#     tags:
#       - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  upload-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
    - uses: actions/checkout@v2
    - name: create release
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false   
    - name: download artifacts
      uses: actions/download-artifact@v1
      with:
        name: uploads    
    - name: upload macos
      id: upload-macos 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./uploads/macos.zip
        asset_name: macos.zip
        asset_content_type: application/zip  
    - name: upload linux
      id: upload-linux
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./uploads/linux.zip
        asset_name: linux.zip
        asset_content_type: application/zip   
    - name: upload windows
      id: upload-windows
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./uploads/windows.zip
        asset_name: windows.zip
        asset_content_type: application/zip         

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install ALSA
      run: |
        sudo apt-get update -yqq
        sudo apt-get install -yqq --no-install-recommends libasound2-dev
    - name: Build
      run: cargo build --verbose
    - name: zip linux artifact
      run: |
        zip -r discoserver-linux target/debug/discoserver
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        name: discoserver
        path: discoserver-linux.zip

  build-macos:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build --verbose
    - name: zip macos artifact
      run: |
        zip -r discoserver-macos target/debug/discoserver
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        name: discoserver
        path: discoserver-macos.zip

  build-windows:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build --verbose
    - name: zip windows artifact
      run: |
        powershell Compress-Archive target\debug\discoserver.exe discoserver-windows.zip 
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        name: discoserver
        path: discoserver-windows.zip
